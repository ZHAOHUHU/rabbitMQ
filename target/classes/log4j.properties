#   Log4j建议只使用四个级别，优先级从高到低分别是ERROR，WARN，INFO，DEBUG对应着 错误，警告，信息，调试
#   高级别level会屏蔽低级别level。
#   debug：显示debug、info、error
#   info：显示info、error
#logDB
log4j.rootLogger=DEBUG,console ,logRollingFile 
#输出到控制台
#表示console完成继承ConsoleAppender
log4j.appender.console=org.apache.log4j.ConsoleAppender    
#设置输出样式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#输出级别
log4j.appender.console.Threshold=INFO
#日志输出信息格式为
log4j.appender.console.layout.ConversionPattern=[%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%m%n  
#输出到文件(这里默认为追加方式)
#logRollingFile完成继承RollingFileAppender
log4j.appender.logRollingFile= org.apache.log4j.RollingFileAppender 
#显示格式，才去自定义形式
log4j.appender.logRollingFile.layout= org.apache.log4j.PatternLayout 
#自定义格式
log4j.appender.logRollingFile.layout.ConversionPattern=[%-5p][%-22d{yyyy/MM/dd HH:mm:ssS}][%l]%m%n
#大于此级别的才展示
log4j.appender.logRollingFile.Threshold= DEBUG 
#立即输出
log4j.appender.logRollingFile.ImmediateFlush= TRUE 
#追加
log4j.appender.logRollingFile.Append= TRUE 
#指定文件路径
log4j.appender.logRollingFile.File=C:/MySqlService/MySqlService.log
#文件大小
log4j.appender.logRollingFile.MaxFileSize= 10MB 
#文件允许最多个数
log4j.appender.logRollingFile.MaxBackupIndex= 50 
#编码格式
log4j.appender.logRollingFile.Encoding= UTF-8
#########################################
#log4j.appender.logDB= org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.logDB.layout= org.apache.log4j.PatternLayout
#log4j.appender.logDB.Driver= com.mysql.jdbc.Driver
#log4j.appender.logDB.URL= jdbc:mysql://127.0.0.1:3306/xly
#log4j.appender.logDB.User= root
#log4j.appender.logDB.Password= 123456
#log4j.appender.logDB.Sql= INSERT INTOT_log4j(project_name,create_date,level,category,\
# file_name,thread_name,line,all_category,message)\
# values('Struts2','%d{yyyy-MM-ddHH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')
#自定义样式
#%c 输出所属的类目，通常就是所在类的全名
#%C 输出Logger所在类的名称，通常就是所在类的全名
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，%d{ABSOLUTE}，%d{DATE}
#%F 输出所在类的类名称，只有类名。
#%l 输出语句所在的行数，包括类名+方法名+文件名+行数
#%L 输出语句所在的行数，只输出数字
#%m 输出代码中指定的讯息，如log(message)中的message
#%M 输出方法名
#%p 输出日志级别，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
#%% 用来输出百分号“%”